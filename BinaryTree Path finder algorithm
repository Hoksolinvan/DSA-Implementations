import java.util.*;

public class BinaryTree {
////////////////////////////////////////////////////////////////
  private static Node root;
  
  static class Node {
    public int iData;              // data item (key)
    public Node leftChild;         // this node's left child
    public Node rightChild;        // this node's right child
    
    public void displayNode()      // display ourself
    {
      System.out.print(iData + " ");
    }
    
    public String toString() {
    	return this.iData+"";
    }
  }  // end class Node

//-------------------------------------------------------------
  public BinaryTree()         // constructor of the Binary Tree
  { root = null; }            // no nodes in tree yet
//-------------------------------------------------------------
    
  public Node getRoot() {
	  return this.root;
  }
  
  public void setRoot(Node p){
	  this.root = p;
  }
  
  public void insert(int id) {
    Node newNode = new Node();    // make new node
    newNode.iData = id;           // insert data

    if(root==null)                // no node in root
      root = newNode;
    else                          // root occupied
    {
      Random rnd = new Random();
      Node current = root;
      Node parent = root;
      int rand = 0;
      while (current!=null){
        parent = current;
        rand = rnd.nextInt(2);
        if (rand==0) current = current.leftChild;
        else current = current.rightChild;
      }
      if (rand==0) parent.leftChild = newNode;
      else parent.rightChild = newNode;
    }
  }  // end insert()

//-------------------------------------------------------------

  /* Level-order traversal of the Tree
   */
  public void displayTree() {
    Queue<Node> q = new LinkedList<Node>();
    q.add(root);
    while (!q.isEmpty()){
      Node current = q.poll();
      current.displayNode();
      if (current.leftChild!=null) {
        System.out.print("Left: " + current.leftChild.iData + "\t");
        q.add(current.leftChild);
      }
      else {
        System.out.print("Left:NULL" + "\t");
      }
      if (current.rightChild!=null) {
        System.out.print("Right: " + current.rightChild.iData + "\n");
        q.add(current.rightChild);
      }
      else {
        System.out.println("Right:NULL");
      }
    }
    System.out.println();
  }  

  public void displayTree2() {
    Queue<Node> q = new LinkedList<Node>();
    q.add(root);
    while (!q.isEmpty()){
      Node current = q.poll();
      current.displayNode();
      if (current.leftChild!=null) {
        q.add(current.leftChild);
      }
      if (current.rightChild!=null) {
        q.add(current.rightChild);
      }
    }
  }

   /*@param  another binary tree
   * @return return true or false
   * indicating whether this binary tree is symmetric of itself.
   */
  public boolean isSymmetric(){
    // YOUR CODES
	  
	  
	  
	  
    return root==null || isSymmetric(root.leftChild,root.rightChild); 
    //already know that root is ALWAYS Symmetrical so we can just start from the children nodes
    
    
    // FOR COMPILATION, YOU NEED TO CHANGE IT  
  }
  
  public boolean isSymmetric(Node left,Node right) {
	  
	  if(left==null && right==null) return true;
	 
	  else if(left!=null || right!=null) {
		  
		  return left.iData==right.iData &&isSymmetric(left.leftChild,right.rightChild) && isSymmetric(left.rightChild,right.leftChild);
	  }
	  
	  //Insurance case
	  return false;
	  
	  
	  
  }
  
  /*
   * @param: two arbitrary nodes p and q
   * @return: true or false indicating whether there is a path from p to q.
   */
  
  
	  
  
  public static boolean hasPath(Node p, Node q) {
	  
	  
	  // YOUR CODES
	  if(p==null) {
		  return false;
	  }
	  
	  if(p==null || q==null) {
		  return false;
	  }
	  
	  else if(p.iData==q.iData) {
		  return true;
	  }
	  
	  
	  return hasPath(p.leftChild,q) || hasPath(p.rightChild,q); // For compilation. You need to change it.
  }
  
  /*
   * @param none
   * @return return all the root-to-leaf paths in this Binary Tree
   */
  public static ArrayList<ArrayList<Integer>> getPaths(){
    // YOUR CODES
	
	  
	  
	 ArrayList<Integer> contains= new ArrayList<>();
	 ArrayList<ArrayList<Integer>> result = new ArrayList<>();
	 
	 getPaths(result,contains,root);
	 
    return result;// FOR COMPILAION, YOU NEED TO CHANGE IT.
  }
  
 
  public static void getPaths(ArrayList<ArrayList<Integer>> b, ArrayList<Integer> p , Node root){
	  
	  if(root==null) {
		  return;
	  }
	  p.add(root.iData);
	  
	  if(root.leftChild==null && root.rightChild==null) {
		  b.add(new ArrayList<Integer>(p));
		  return;
		  
	  }
	  
	 
	  if(root.leftChild!=null) {
		 getPaths(b,new ArrayList<Integer>(p),root.leftChild);
		  
		  
	  }
	   if(root.rightChild!=null) {
		   
		  getPaths(b,new ArrayList<Integer>(p), root.rightChild);
		  
	  }
	  
	   
	  
	  p.remove(p.size()-1);
	  
	  
	  
	  
  }
  
  
  
  public static void main(String[] args) {
    // Sample Codes, Create a binary tree and display all the nodes in level-order
    BinaryTree theTree = new BinaryTree();
    theTree.insert(50);    
    theTree.insert(25);    
    theTree.insert(75);
    theTree.insert(12);    
    theTree.insert(37);    
    theTree.insert(43); 
    theTree.insert(30);    
    theTree.insert(33);
    theTree.insert(87);
    theTree.insert(93);    
    theTree.insert(97);
    
    theTree.displayTree();
    
    
    /* Problem 1:
     * Call isSymmetric() to judge this binary tree is symmetric of itself around the center.
     * YOUR CODES
     */
    
    System.out.println("Displays symmetry");
    System.out.println(theTree.isSymmetric()+"\n");
    
    /* Problem 2:
     * First create two Nodes (suppose they both are on the tree), call the hasPath method to determine
     * whether there is a path between then.
     */
    
    Node p = new Node();
    Node qq = new Node();
    Node jj= new Node();
    jj.iData=4;
    qq.iData=3;
    p.iData=2;
    
    p.leftChild=qq;
    
    System.out.println("Displays path");
    System.out.println(hasPath(p,qq));
    System.out.println(hasPath(p,jj) +"\n");
    
   
   
    
       
  

    
    /*
     * Problem 3:
     * Call the getPaths() method, and display all the root-to-leaf paths on the binary tree
     * YOUR CODES
     */
    
    System.out.println(getPaths());
  
 
    
   
  }
}
