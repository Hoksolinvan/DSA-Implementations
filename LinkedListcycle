import java.util.Scanner;

//Time Complexity O(N)


/*
 * Author: Hoksolinvan Chhun
 * Due Date: Feb, 20, 2023
 * Purpose: This program detects if the linkedlist contains a cycle. 

Credit: I did my work independently without help from external sources

 */


public class LinkedListCycle {
  static class Link {
    public int iData;              // data item
    public Link next;              // next link in list
  
    public Link(int id) // constructor
    {
      iData = id;                 // initialize data     
      next =  null;
    }                      
    
    public void displayLink()      // display ourself
    {
      System.out.print("{" + iData + "} ");
    }
  }  // end class Link
  
	static class LinkList {
		public Link first; // ref to first link on list
		
		public LinkList() // constructor
		{
			first = null; // no links on list yet
		}
		
		public boolean isEmpty() // true if list is empty
		{
			return (first == null);
		}

		// insert at start of list
		public void insertFirst(int id) { // make new link
			Link newLink = new Link(id);
			newLink.next = first; // newLink --> old first
			first = newLink; // first --> newLink
		}
		
		public Link deleteFirst() // delete first item
		{ // (assumes list not empty)
			Link temp = first; // save reference to link
			first = first.next; // delete it: first-->old next
			return temp; // return deleted link
		}
		
		public void displayList() {
			System.out.print("List (first-->last): ");
			Link current = first; // start at beginning of list
			while (current != null) // until end of list,
			{
				current.displayLink(); // print data
				current = current.next; // move to next link
			}
			System.out.println("");
		}
		
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder();
			Link current = first; // start at beginning of list
			while (current != null) // until end of list,
			{
				sb.append(current.iData + " "); // print data
				current = current.next; // move to next link
			}
			return sb.toString();
		}

		public boolean containCycle() {
			// YOUR CODES
			
			
			
			
			if(first==null) {
				
				return false;
			}
			
			boolean flag=false;
			
			Link firstpointer=first;
			Link secondpointer=first;
			
			
			
	
		while(firstpointer!=null && secondpointer!=null) {
			
			
			if(secondpointer.next==null) {
				
				flag=false; 
				break;
			}
			
			else {
				firstpointer=firstpointer.next;

				secondpointer=secondpointer.next.next;
			}
			
					if(firstpointer==secondpointer) {
					
					flag=true;
					break;
					
			
				} else if(firstpointer==null) {
					
					flag=false;
					break;
					
					
				}
					
			
			}
		
		
	
	if(flag==true) {
			
			
			return flag;
	}
	else {
		return false;
	}
			
			
			
	
		}
	} // end class LinkList
	
	public static void main(String[] args) {
		Link first = new Link(1);
		Link second = new Link(2);
		Link third = new Link(3);
		Link fourth = new Link(4);
		Link fifth= new Link(5);
		

		first.next = second;
		second.next = third;
		third.next = fourth;
		fourth.next=fifth;

		LinkList theList = new LinkList(); // create the linked list
		theList.first = first;

		System.out.println("Does the linked list contain a cycle?: " + theList.containCycle());
		
	} // end main()
} // end class LinkedListCycle
