import java.util.*;


public class InfixEvaluator
{
	public static void main(String[] args) {
	InfixEvaluator infix = new InfixEvaluator();
		System.out.print("Please enter an arithmetic expressions: ");
		Scanner input = new Scanner(System.in);
		String exp = input.nextLine();
		input.close();
		System.out.println("The result is: " + infix.evaluateInfix(exp));
	}
	
	public static double evaluateInfix(String expression){
	    Stack<Double> operand= new Stack<>();
	    Stack<String> operator= new Stack<>();
	    

	    for(int i=0;i<expression.length();i++){
	        if(Character.toString(expression.charAt(i)).equals(" ")){
	            continue;
	        }
	        else if(Character.isDigit(expression.charAt(i))){
    String operandString = "";
    while(i < expression.length() && (Character.isDigit(expression.charAt(i)) || expression.charAt(i) == '.')) {
        operandString += expression.charAt(i);
        i++;
    }
    i--;
    operand.push(Double.parseDouble(operandString));
}

	        else if(Character.toString(expression.charAt(i)).equals("(")){
	            operator.push(Character.toString(expression.charAt(i)));
	        }
	         else if(Character.toString(expression.charAt(i)).equals(")")){
	            while(operator.size()>0 && !operator.peek().equals("(")){
	                String operators= operator.pop();
	                double op2 = operand.pop();
	                double op1 = operand.pop();
	                
	                Double result= operation(op1,op2,operators);
	                operand.push(result);
	            }
	            operator.pop();
	        }
	        else if(Character.isDigit(expression.charAt(i))){
	            operand.push(Double.parseDouble(Character.toString(expression.charAt(i))));
	        }
	       
	        else if(Character.toString(expression.charAt(i)).equals("+") || Character.toString(expression.charAt(i)).equals("-") || Character.toString(expression.charAt(i)).equals("*") || Character.toString(expression.charAt(i)).equals("/") || Character.toString(expression.charAt(i)).equals("^")){
	            while(operator.size()>0 && !operator.peek().equals("(") && precedence(Character.toString(expression.charAt(i)))<=precedence(operator.peek())){
	                String operators= operator.pop();
	                double op2 = operand.pop();
	                double op1=0;
	               if(!operand.isEmpty())
	                op1 = operand.pop();
	                
	                Double result= operation(op1,op2,operators);
	                operand.push(result);
	            }
	            
	            operator.push(Character.toString(expression.charAt(i)));
	        }
	        
	    }
	    
	    while(operator.size()>0){
	         String operators= operator.pop();
	                double op2 = operand.pop();
	                double op1 = operand.pop();
	                
	                Double result= operation(op1,op2,operators);
	                operand.push(result);
	    }
	    
	    double quantumrizzics= operand.pop();
	    return quantumrizzics;
	}
	
	
////////////////////////////////////////////////////////////////////	
	
	
	//checks precedence of the operators
	public static int precedence(String op) {
	    
	    if(op.equals("+") || op.equals("-")){
	        return 1;
	    }
	    else if(op.equals("*") || op.equals("/")){
	        return 2;
	    } else {
	        return 3;
	    }
	    
	}
	
/////////////////////////////////////////////////////////////////
	
	//performs operations
	public static double operation(double v1, double v2, String operatorz){
	    if(operatorz.equals("+")){
	        return v1+v2;
	    }
	    else if(operatorz.equals("-")){
	        return v1-v2;
	    }
	    else if(operatorz.equals("*")){
	        return v1*v2;
	    }
	    else if(operatorz.equals("/")){
	        return v1/v2;
	    }
	    else {
	        return (double)Math.pow(v1,v2);
	    }
	}
}
